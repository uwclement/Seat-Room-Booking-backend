# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/auca_library
spring.datasource.username=postgres
spring.datasource.password=cle111
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update


# JWT Configuration
jwt.secret=yourSecretKeyWhichShouldBeVeryLongAndSecureSoMakeItLongerThanThisExampleAtLeast64BytesToSatisfyTheHS512RequirementAsTheSpecificationDemandsSufficient
jwt.expirationMs=1800000

# Email Configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=clementauca@gmail.com
spring.mail.password=Auca12345@
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Email Configuration with SSL trust disabled (development only)
# spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
# spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory


# # local Server Configuration
  server.port=8080

# running on phone 
# server.address=192.168.1.70
# server.port=8080


# QR Code Configuration
qr:
  base-url: ${QR_BASE_URL:http://192.168.1.65:8080}
  storage:
    type: ${STORAGE_TYPE:local} # local, s3, cloudinary
    local:
      path: ${QR_STORAGE_PATH:./qr-codes}
    s3:
      bucket: ${S3_BUCKET:}
      region: ${S3_REGION:us-east-1}
      access-key: ${AWS_ACCESS_KEY:}
      secret-key: ${AWS_SECRET_KEY:}
  generation:
    size: 300  # pixels
    margin: 10
    logo:
      enabled: true
      path: classpath:static/logo.png
    error-correction: H # L, M, Q, H (Low to High)
  scanning:
    early-checkin-minutes: 15
    late-checkin-minutes: 20
    
# Security Configuration for QR endpoints
security:
  public-endpoints:
    - /scan
    - /scan/info
    - /api/qr/image/**

# File Upload Configuration
spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 50MB